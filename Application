class TreeNode {

	int data;
	TreeNode left;
	TreeNode right;

	TreeNode() {
	}

	public static TreeNode createTree() {
		// Level 1
		TreeNode root = new TreeNode(9);
		// Level 2
		root.left = new TreeNode(6);
		root.right = new TreeNode(3);
		// Level 3
		root.right.left = new TreeNode(2);
		root.right.right = new TreeNode(7);
		// Level 4
		root.right.left.left = new TreeNode(3);
		root.right.left.right = new TreeNode(5);

		return root;
	}

}

public class Application {

	public static void inorderTraversing(TreeNode root) {
		if (root != null) {
			inorderTraversing(root.left);
			System.out.print(root.data + " ");
			inorderTraversing(root.right);

		}
	}

	public static TreeNode mirror(TreeNode node) {

		if (node == null) {
			return node;
		}

		TreeNode left = mirror(node.left);
		TreeNode right = mirror(node.right);

		node.left = right;
		node.right = left;

		return node;
	}

	public static int productOfOnlyChilds(TreeNode node, int product) {

		if (node == null) {
			return 1;
		}

		if (node.left == null && node.right == null) {
			return product = product * node.data;
		}
		int left = productOfOnlyChilds(node.left, product);
		int right = productOfOnlyChilds(node.right, product);

		return left * right;
	}

	public static int sum(TreeNode node) {

		if (node == null) {
			return 0;
		}
		return node.data + sum(node.left) + sum(node.right);
	}

	public static void main(String[] args) {

		TreeNode root = TreeNode.createTree();

		System.out.println("Before mirroring inorder : ");
		inorderTraversing(root);

		System.out.println("\n");
		System.out.println("After mirroring inorder : ");
		mirror(root);

		inorderTraversing(root);
		System.out.println("\n\nProduct of all only child node : " + productOfOnlyChilds(root, 1));

		int sum = sum(root) - root.data;
		System.out.println("\nSum of all child nodes : " + sum);
	}

}
